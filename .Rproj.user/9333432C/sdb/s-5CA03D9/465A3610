{
    "collab_server" : "",
    "contents" : "############################\n#\n# -Separate out the different data set functions into their own files\n# -Combine getSet and getValue functions into single vectorized functions\n#\n#\n############################\n\n\n\n\n#' Return the \\emph{Comsumer Price Wage Index} data set.\n#'\n#' Legislation enacted in 1973 provides for cost-of-living adjustments,\n#' or COLAs. With COLAs, Social Security and Supplemental Security Income\n#' (SSI) benefits keep pace with inflation. The Social Security Act\n#' specifies a formula for determining each COLA. According to the formula,\n#' COLAs are based on increases in the\n#' \\href{https://www.ssa.gov/OACT/STATS/cpiw.html}{Consumer Price Index for Urban Wage Earners and Clerical Workers}\n#' (CPI-W). CPI-Ws are calculated on a monthly basis by the Bureau of Labor\n#' Statistics. This data set comes from the Social Security web site but it\n#' is not a real time fetch, so the data is current up to the time that this\n#' package was created. In order to determine the Consumer Price Index for a\n#' year that is beyond the last year in the data, the data is fit with a\n#' model which is used to project future CPIW values. If no endYear is\n#' provided the function returns the data set of measured values without\n#' any projected values.\n#'\n#' @param endYear the last year to include in the returned data set\n#' @return the CPIW data set\n#' @examples\n#' getCpiwSet(endYear = 2025)\n#' getCpiwSet()\n\n#' @export\ngetCpiwSet <- function(endYear = NULL){\n  if(is.null(endYear)) {\n    return(cpiw)\n  }\n\n  endDate <- lubridate::make_date(year = endYear, month = 12)\n  beginDate <- lubridate::add_with_rollback(max(cpiw$Date, na.rm = TRUE),\n                                            lubridate::as.period(1, unit = \"month\"))\n  if(endDate <= beginDate) {\n    return(cpiw[cpiw$Date <= endDate, ])\n  } else {\n    # Convert Dec of endYear to months since Jan 1974\n    # (the model was constructed using months since 1974)\n    endMonth <- (endYear - 1973) * 12 - 1\n    # Create chunk from max of cpiw$Date to Dec of endYear\n    cpiwChunk <- data.frame(Date = seq(from = beginDate, to = endDate, by = \"month\"),\n                            CPIW = predict(cpiwMars, newdata = (nrow(cpiw)):endMonth),\n                            Status = \"Predicted\")\n    return(rbind(cpiw, cpiwChunk))\n  }\n}\n\n\n\n\n#' Return the \\emph{Cost of Living Adjustment} data set.\n#'\n#' Legislation enacted in 1973 provides for cost-of-living adjustments,\n#' or COLAs. With COLAs, Social Security and Supplemental Security Income\n#' (SSI) benefits keep pace with inflation. The Social Security Act specifies\n#' a formula for determining each COLA. According to the formula, COLAs are\n#' based on increases in the Consumer Price Index for Urban Wage Earners and\n#' Clerical Workers (CPI-W). CPI-Ws are calculated on a monthly basis by the\n#' Bureau of Labor Statistics. A COLA effective for December of the current\n#' year is equal to the percentage increase (if any) in the average CPI-W for\n#' the third quarter of the current year over the average for the third quarter\n#' of the last year in which a COLA became effective. If there is an increase,\n#' it must be rounded to the nearest tenth of one percent. If there is no\n#' increase, or if the rounded increase is zero, there is no COLA. For an\n#' example computation of COLA, see the Lastest\n#' \\href{https://www.ssa.gov/oact/COLA/latestCOLA.html}{Cost of Living Adjustment}\n#' page on the Social Security web site.\n#'\n#' @param endYear the last year to include in the returned data set\n#' @return the cost of living adjustment data set\n#' @examples\n#' getColaSet(endYear = 2025)\n#' getColaSet()\n#'\n#' @export\ngetColaSet <- function(endYear = NULL) {\n  if(is.null(endYear)) {\n    return(cola)\n  }\n\n  beginYear <- max(cola$Year, na.rm = TRUE) + 1\n  if(endYear <= beginYear) {\n    return(cola[cola$Year <= endYear,])\n  } else {\n    # This doesn't do anything yet. Need to put in function\n    # to calculate COLAs based on CPIW\n    colaChunk <- data.frame(Year = beginYear:endYear,\n                                    COLA = NA)\n    colaChunk$Status = \"Predicted\"\n\n    return(rbind(cola, colaChunk))\n  }\n}\n\n\n\n\n#' Return the \\emph{Primary Insurance Amount Bend Points} data set.\n#'\n#' The Primary Insurance Amount (PIA) is the base value of a worker's OASDI\n#' at full retirement age. It is calculated by summing three separate percentages\n#' of portions of the worker's Average Indexed Monthly earnings (AIME). The\n#' portions depend on the year in which a worker attains age 62, becomes\n#' disabled before age 62, or dies before attaining age 62. The threshold\n#' points that determine the portions of a worker's AIME that apply to each\n#' percentage are called the PIA bend points. PIA bend points are based on\n#' the Average Wage Index (AWI), using the AWI for 1977 as the reference year.\n#' The Social Security web site shows \\href{https://www.ssa.gov/oact/COLA/piaformula.html}{an example}\n#' of how to calculate these points.\n#'\n#' @param endYear the last year to include in the returned data set\n#' @return the primary insurance amount bend point data set\n#' @examples\n#' getPiaBendPtsSet(endYear = 2025)\n#' getPiaBendPtsSet()\n#'\n#' @export\ngetPiaBendPtsSet <- function(endYear = NULL) {\n  if(is.null(endYear)) {\n    return(piaBends)\n  }\n\n  beginYear <- max(piaBends$Year, na.rm = TRUE) + 1\n  if(endYear <= beginYear) {\n    return(piaBends[piaBends$Year <= endYear, ])\n  } else {\n    awiTemp <- getAwiSet(endYear = endYear)\n    # Calculate missing bend points using bend point\n    # formula\n    futurePiaBends <-\n      do.call(rbind, lapply((max(piaBends$Year)+1):endYear,\n                            FUN = function(y){\n                              data.frame(Year = y,\n                                         First =\n                                           round(awiTemp[awiTemp$Year == y-2,]$AWI /\n                                                   awiTemp[awiTemp$Year == 1977,]$AWI *\n                                                   piaBends[piaBends$Year == 1979,]$First),\n                                         Second =\n                                           round(awiTemp[awiTemp$Year == y-2,]$AWI /\n                                                   awiTemp[awiTemp$Year == 1977,]$AWI *\n                                                   piaBends[piaBends$Year == 1979,]$Second),\n                                         Third =\n                                           round(awiTemp[awiTemp$Year == y-2,]$AWI /\n                                                   awiTemp[awiTemp$Year == 1977,]$AWI *\n                                                   piaBends[piaBends$Year == 1979,]$Third),\n                                         Formula = c(\"PIA\", \"Maximum\"))\n                            }))\n    piab <- rbind(piaBends, futurePiaBends)\n    piab <- piab[order(piab$Formula, piab$Year), ]\n\n    return(piab)\n  }\n}\n\n\n\n#' Return the \\emph{Primary Insurance Amount Bend Points} for a year.\n#'\n#' Return the PIA bend points for a year. These values are\n#' calculated using AWI values.\n#'\n#' @param year the year for the PIA bend points to return\n#' @return the PIA bend points for \\code{year}\n#' @examples\n#' getPiaBendPts(year = 2025)\n#'\n#' @export\ngetPiaBendPts <- function(year = NULL) {\n  if(is.null(year) || missing(year)) {\n    stop(\"Need to specify the year for which you want the PIA bend points.\")\n  } else if(year < max(piaBends$Year)) {\n    piaBends[which(piaBends$Year == year & piaBends$Formula == \"PIA\"),\n             c(\"First\", \"Second\")]\n  } else {\n    awiTemp <- getAwiSet(endYear = year)\n    data.frame(First =\n                 round(awiTemp[awiTemp$Year == year - 2,]$AWI /\n                         awiTemp[awiTemp$Year == 1977,]$AWI *\n                         piaBends[piaBends$Year == 1979 &\n                                  piaBends$Formula == \"PIA\",]$First),\n               Second =\n                 round(awiTemp[awiTemp$Year == year - 2,]$AWI /\n                         awiTemp[awiTemp$Year == 1977,]$AWI *\n                         piaBends[piaBends$Year == 1979 &\n                                  piaBends$Formula == \"PIA\",]$Second))\n  }\n}\n\n\n\n#' Return the maximum family benefit \\emph{Primary Insurance Amount Bend Points} for a year.\n#'\n#' Return the family maximum PIA bend points for a year. These values are\n#' calculated using AWI values.\n#'\n#' @param year the year for the family maximum PIA bend points to return\n#' @return the family maximum PIA bend points for \\code{year}\n#' @examples\n#' getMaxPiaBendPts(year = 2025)\n#'\n#' @export\ngetMaxPiaBendPts <- function(year = NULL) {\n  if(is.null(year) || missing(year)) {\n    stop(\"Need to specify the year for which you want the family maximum PIA bend points.\")\n  } else if(year < max(piaBends$Year)) {\n    piaBends[which(piaBends$Year == year & piaBends$Formula == \"Maximum\"),\n             c(\"First\", \"Second\", \"Third\")]\n  } else {\n    awiTemp <- getAwiSet(endYear = year)\n    data.frame(First =\n                 round(awiTemp[awiTemp$Year == year - 2,]$AWI /\n                         awiTemp[awiTemp$Year == 1977,]$AWI *\n                         piaBends[piaBends$Year == 1979 &\n                                    piaBends$Formula == \"Maximum\",]$First),\n               Second =\n                 round(awiTemp[awiTemp$Year == year - 2,]$AWI /\n                         awiTemp[awiTemp$Year == 1977,]$AWI *\n                         piaBends[piaBends$Year == 1979 &\n                                    piaBends$Formula == \"Maximum\",]$Second),\n               Third =\n                 round(awiTemp[awiTemp$Year == year - 2,]$AWI /\n                         awiTemp[awiTemp$Year == 1977,]$AWI *\n                         piaBends[piaBends$Year == 1979 &\n                                    piaBends$Formula == \"Maximum\",]$Third))\n  }\n}\n\n\n\n\n#' Return the \\emph{Primary Insurance Amount Adjustments} data set.\n#'\n#' If a worker takes benefit distributions before or after the\n#' normal retirement age, the PIA is adjusted by multiplying it\n#' by a percentage.\n#' A \\href{https://www.ssa.gov/oact/ProgData/ar_drc.html}{table of adjustments}\n#' is available on the Social Security web site. Any year of birth greater\n#' than 1960 uses the same percentage adjustments as for 1960. Therefore\n#' any year passed into the function greater than 1960 will return the\n#' same data set.\n#'\n#' @param birthYear the last birth year to include\n#' @return the percentage adjustment data set for all ages up to the birth year\n#' @examples\n#' getPiaAdjustmentSet(endYear = 1955)\n#' getPiaAdjustmentSet()\n#'\n#' @export\ngetPiaAdjustmentsSet <- function(endYear = NULL) {\n  if(is.null(endYear)) {\n    return(piaAdjustments)\n  }\n\n  lastYear <- max(piaAdjustments$`Year of birth`, na.rm = TRUE) + 1\n  if(endYear <= lastYear) {\n    return(piaAdjustments[piaAdjustments$`Year of birth` <= endYear,])\n  } else {\n    return(piaAdjustments)\n  }\n}\n\n\n\n#' Return the \\emph{Primary Insurance Amount Adjustments} for a birth year.\n#'\n#' If a worker takes benefit distributions before or after the\n#' normal retirement age, the PIA is adjusted by multiplying it\n#' by a percentage.\n#' A \\href{https://www.ssa.gov/oact/ProgData/ar_drc.html}{table of adjustments}\n#' is available on the Social Security web site. This function returns\n#' the adjustments listed in the table for the input birth year.\n#'\n#' @param birthYear the birth year of the worker\n#' @return the percentage adjustment data set for the input birth year\n#' @examples\n#' getPiaAdjustmentSet(birthYear = 1955)\n#'\n#' @export\ngetPiaAdjustments <- function(birthYear = NULL) {\n  if(is.null(birthYear) || missing(birthYear)) {\n    stop(\"Need to specify the birth year for which you want the primary insurance amount adjustments.\\n\")\n  } else if(birthYear < min(piaAdjustments$`Year of birth`)) {\n    stop(paste(\"Input birth year is before the first available year in the data set.\",\n               \"No data was returned\\n\",\n               sep = \"\\n  \"))\n  }\n\n  if(birthYear <= max(piaAdjustments$`Year of birth`)) {\n    return(piaAdjustments[piaAdjustments$`Year of birth` == birthYear,])\n  } else {\n    return(piaAdjustments[piaAdjustments$`Year of birth` == 1960,])\n  }\n}\n\n\n\n\n",
    "created" : 1491053714488.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1718388596",
    "id" : "465A3610",
    "lastKnownWriteTime" : 1498661466,
    "last_content_update" : 1498661466569,
    "path" : "/home/tim/Dropbox/oasdir/R/parameters.R",
    "project_path" : "R/parameters.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}