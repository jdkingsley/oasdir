{
    "collab_server" : "",
    "contents" : "\n\n#' Return Social Security information from an XML file.\n#'\n#' Your Social Security statement is available on the Social\n#' Security web site as a PDF file and an XML file. This\n#' function reads the XML file and returns a list containing\n#' all the information the XML file provides. First download\n#' the XML file you your computer then provide the file name\n#' as an input to this function. Use either the full path name\n#' or a relative path name as part of the file name input.\n#'\n#' @param file the name of the XML file to read\n#' @return a list containing the Social Security Statement information\n#' @examples\n#' read_xml_ssStatement(file = \"./myStatementData/richieRich.xml\")\n#'\n#' @export\nreadStatement <- function(file = NULL) {\n  if(is.null(file) || missing(file)) {\n    stop(\"Need to specify the Social Security XML file to read.\")\n  } else if (!file.exists(file)) {\n    stop(paste(\"file\", file, \"could not be found. Did you pass in the whole path?\"))\n  } else {\n    ssData <- xml2::read_xml(\"./Data/Tim_Social_Security_Statement_Data.xml\")\n    earningsRecord <- xml2::xml_child(ssData, \".//osss:EarningsRecord\")\n    userInformation <- xml2::xml_child(ssData, \".//osss:UserInformation\")\n    estimatedBenefits <- xml2::xml_child(ssData, \".//osss:EstimatedBenefits\")\n    retirementAge <- xml2::xml_find_all(estimatedBenefits, \".//osss:RetirementAge\")\n\n    # The retirement (old age) data requires some munging, so we\n    # do it outside the list creation then add it in\n    oaYears <- xml2::xml_integer(xml2::xml_child(retirementAge, \".//osss:Years\"))\n    oaMonths <- xml2::xml_integer(xml2::xml_child(retirementAge, \".//osss:Months\"))\n    oaMonths[is.na(oaMonths)] <- 0\n    oaYears <- oaYears + oaMonths/12\n\n    list(\n      creationDate =\n        lubridate::ymd_hms(xml2::xml_text(xml2::xml_find_all(ssData, \".//osss:FileCreationDate\"))),\n      userInformation = list(\n        name = xml2::xml_text(xml2::xml_child(userInformation, \".//osss:Name\")),\n        dateOfBirth = as.Date(xml2::xml_text(xml2::xml_child(userInformation, \".//osss:DateOfBirth\"))),\n        fullRetirementAge =\n          xml2::xml_integer(xml2::xml_child(xml2::xml_child(estimatedBenefits,\n                                          \".//osss:FullRetirementEstimate\"),\n                                \".//osss:Years\")) +\n          xml2::xml_integer(xml2::xml_child(xml2::xml_child(estimatedBenefits,\n                                          \".//osss:FullRetirementEstimate\"),\n                                \".//osss:Months\")) / 12\n      ),\n      earnings = data.frame(\n        startYear = as.integer(xml2::xml_attr(xml2::xml_find_all(earningsRecord,\n                                                     \".//osss:Earnings\"), \"startYear\")),\n        endYear = as.integer(xml2::xml_attr(xml2::xml_find_all(earningsRecord,\n                                                   \".//osss:Earnings\"), \"endYear\")),\n        ficaEarnings = xml2::xml_integer(xml2::xml_find_all(earningsRecord, \".//osss:FicaEarnings\")),\n        medicareEarnings = xml2::xml_integer(xml2::xml_find_all(earningsRecord, \".//osss:MedicareEarnings\"))\n      ),\n      oldAge = data.frame(\n        age = oaYears,\n        estimate = xml2::xml_integer(xml2::xml_find_all(estimatedBenefits, \".//osss:Estimate\"))\n      ),\n      survivorBenefits = list(\n        oneTimeDeath =\n          xml2::xml_integer(xml2::xml_child(estimatedBenefits, \".//osss:OneTimeDeathBenefit\")),\n        survivorsEstimateChild =\n          xml2::xml_integer(xml2::xml_child(estimatedBenefits, \".//osss:SurvivorsEstimateChild\")),\n        survivorsEstimateFamily =\n          xml2::xml_integer(xml2::xml_child(estimatedBenefits, \".//osss:SurvivorsEstimateFamily\")),\n        survivorsEstimateRetired =\n          xml2::xml_integer(xml2::xml_child(estimatedBenefits, \".//osss:SurvivorsEstimateRetired\")),\n        survivorsEstimateSpouseChild =\n          xml2::xml_integer(xml2::xml_child(estimatedBenefits, \".//osss:SurvivorsEstimateSpouseChild\"))\n      ),\n      disabilityEstimate =\n        xml2::xml_integer(xml2::xml_child(estimatedBenefits, \".//osss:DisabilityEstimate\")),\n      ficaTaxTotal = list(\n        Employer = xml2::xml_integer(xml2::xml_child(earningsRecord,\n                                         \".//osss:FicaTaxTotalEmployer\")),\n        Individual = xml2::xml_integer(xml2::xml_child(earningsRecord,\n                                           \".//osss:FicaTaxTotalIndividual\"))\n      ),\n      medicareTaxTotal = list(\n        Employer = xml2::xml_integer(xml2::xml_child(earningsRecord,\n                                         \".//osss:MedicareTaxTotalEmployer\")),\n        Individual = xml2::xml_integer(xml2::xml_child(earningsRecord,\n                                           \".//osss:MedicareTaxTotalIndividual\"))\n      )\n    )\n  }\n}\n\n\n\n\n#' Return the \\emph{Federal Insurance Contribution Act} data set.\n#'\n#' Taxes under the Federal Insurance Contributions Act (FICA) are\n#' composed of the old-age, survivors, and disability insurance taxes,\n#' also known as social security taxes, and the hospital insurance tax,\n#' also known as Medicare taxes. Different rates apply for these taxes.\n#' The amount an employee pays in FICA tax is capped at the Benefit and\n#' Contribution Base which can change from year to year according to\n#' the Average Wage Index (AWI). The data set returned will contain the\n#' actual values for years that the government listed at the time\n#' this package was built. For any year beyond that, an estimate is\n#' returned based on estimated values for the Benefit and Contribution\n#' Base and full wage earnings. Since Medicare taxes are not capped\n#' the full wage earnings are estimated using the medicare earnings\n#' (they are the same). The minimum of estimated Medicare earnings\n#' and estimated Benefit and Contribution Base will be the FICA earnings\n#' returned.\n#'\n#' The \\code{endYear} is the last year of FICA earnings to return. If no\n#' \\code{endYear} is given, only the FICA earnings contained in the input\n#' Social Security Statement object are returned.\n#'\n#' @param endYear the last year to include in the returned data set\n#' @param statement the Social Security Statement Object returned from \\code{readStatement}\n#' @return the FICA earnings data set\n#' @examples\n#' getFicaEarnings(statement = myStatement, endYear = 2025)\n#' getFicaEarnings(statement = myStatement)\n\n#' @export\ngetFicaEarnings <- function(statement = NULL, endYear = NULL) {\n  if(is.null(statement) || missing(statement))\n    stop(\"parameter: 'statement' is not optional. Use 'readStatement'\n         to get a statement object and pass that into this function.\")\n  if(is.null(endYear)) {\n    return(statement$earnings[, c(\"beginYear\", \"endYear\", \"ficaEarnings\")])\n  }\n\n  beginYear <- max(statement$earnings$endYear)\n  if(endYear <= beginYear) {\n    return(statement$earnings[, c(\"beginYear\", \"endYear\", \"ficaEarnings\")])\n  } else {\n\n\n    ###### CHECK THIS CODE!! WE NEED TO CHECK FOR LATEST MEDICARE EARNINGS\n    ###### YEAR BUT ALSO THE LATEST BENEFIT BASE YEAR!!\n\n\n    warning(\"Values after \", max(statement$earnings$endYear), \" are predicted values.\")\n    medicareMars <- earth::earth(statement$earnings$medicareEarnings ~ startYear,\n                                 statement$earnings)\n    # get benefit base values for beginYear:endYear\n    benefitBase <- getBenefitBaseValues(beginYear:endYear)\n    medicareEarnings = predict(medicareMars, newdata = beginYear:endYear)\n\n    # Create chunk from last year of fica earnings to endYear\n    ficaChunk <- data.frame(beginYear = beginYear:endYear,\n                            endYear = beginYear:endYear,\n                            ficaEarnings = min(benefitBase, medicareEarnings))\n    return(rbind(statement$earnings[, c(\"beginYear\", \"endYear\", \"ficaEarnings\")],\n                 ficaChunk))\n  }\n}\n",
    "created" : 1493551816609.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3296168300",
    "id" : "6AB0E2E",
    "lastKnownWriteTime" : 1491611796,
    "last_content_update" : 1491611796,
    "path" : "~/Dropbox/oasdir/R/statement.R",
    "project_path" : "R/statement.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}